{"version":3,"sources":["components/notFound.jpg","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/FriendType.js","containers/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Card","name","id","email","picSet","className","src","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","randomize","type","placeholder","onChange","onClick","icon","faRandom","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","notFound","this","setState","length","notFoundPic","Component","FriendType","App","onSearchChange","event","searchfield","target","value","set","Random","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad2e2c71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notFound.0deecff3.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({name, id, email, picSet}) => {\n  //{name, id, email} = props;\n\n  return (\n    <div className=\"bg-light-green-gradient dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/set_set${picSet}/${id}?200x200`} alt=\"robot\" />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots, picSet }) => {\n  const cardArray = robots.map((user, i) => {\n\n    //it will only work in production build\n    // if(true) {\n    //   throw new Error(\"test error!\");\n    // }\n\n    return (\n      <Card\n        key={i}\n        picSet={picSet}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n  return <div>{cardArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRandom } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SearchBox = ({searchChange, randomize}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n      <button\n        onClick={randomize}\n        className=\"pa3 link dim dib hot-pink bg-black\"\n      >\n        <FontAwesomeIcon icon={faRandom} />\n      </button>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '700px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport notFoundPic from './notFound.jpg';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      notFound: false\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.props.robots.length === 0) {\n      return (\n        <div className=\"bg-light-green-gradient dib br3 pa3 ma2 grow bw2 shadow-5\">\n          <img src={notFoundPic} alt=\"not found pic\" />\n        </div>\n      );\n    }\n\n    if (this.state.hasError) {\n      return <h1> Ooops! Something went wrong </h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","export const FriendType = [\"ROBO\", \"MONSTER\", \"SUAVE\", \"CAT\", \"HUMAN\"];","import React, { Fragment, Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Random from 'lodash/random';\nimport {FriendType} from \"../components/FriendType\";\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n      type: FriendType[3-1],\n      picSet: 3\n    };\n  }\n  //experimental. alternative is bind it in the constructor.\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value});\n  }\n\n  randomize = (event) => {\n    const set = Random(1, 5);\n    this.setState({ picSet: set , type: FriendType[set-1]});\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\") \n      .then(response => response.json())\n      .then(users => this.setState({robots: users}))\n    ;\n    // this.setState({robots: robots});\n  }\n\n  render() {\n    const { searchfield, robots, picSet, type } = this.state;\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name\n        .toLowerCase()\n        .includes(searchfield.toLowerCase());\n    });\n\n    if(!robots.length) {\n      return <h1 className=\"tc\"> Loading... </h1>\n    }\n    return (\n      <Fragment>\n        <div className=\"tc\">\n          <h1 className=\"f1\">{type}Friends</h1>\n          <SearchBox\n            searchChange={this.onSearchChange}\n            randomize={this.randomize}\n          />\n          <Scroll>\n            <ErrorBoundary robots={filteredRobots}>\n              <CardList robots={filteredRobots} picSet={picSet} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}