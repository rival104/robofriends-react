{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","id","email","className","src","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCLSC,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAEvB,OACE,yBAAKC,UAAU,6DACb,yBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,UACpD,4BAAKL,GACL,2BAAIE,KCeKI,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAOlC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIM,EAAOI,GAAGV,GACdD,KAAMO,EAAOI,GAAGX,KAChBE,MAAOK,EAAOI,GAAGT,WAIvB,OAAO,6BAAMM,ICLAK,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCiBEC,E,YAnBb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACXC,UAAU,GAHK,E,iFAQjBC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAGC,KAAKF,MAAMC,SACL,6DAEFC,KAAKT,MAAMK,a,GAhBMM,aCuDbC,G,kBAjDb,aAAc,IAAD,8BACX,+CAQFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAPzC,EAAKV,MAAQ,CACXnB,OAAQ,GACR2B,YAAa,IALJ,E,iFAaQ,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAKhC,IAAD,EACyBb,KAAKF,MAA7BQ,EADD,EACCA,YAAa3B,EADd,EACcA,OAEfmC,EAAiBnC,EAAOoC,QAAO,SAAAC,GACnC,OAAOA,EAAM5C,KACV6C,cACAC,SAASZ,EAAYW,kBAG1B,OAAItC,EAAOwC,OAIT,kBAAC,WAAD,KACE,yBAAK5C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAQmC,QATnB,wBAAIvC,UAAU,MAAd,oB,GAhCK2B,cCClBkB,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SP0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.99c8cb96.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({name, id, email}) => {\n  //{name, id, email} = props;\n  return (\n    <div className=\"bg-light-green-gradient dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  const cardArray = robots.map((user, i) => {\n\n    //it will only work in production build\n    // if(true) {\n    //   throw new Error(\"test error!\");\n    // }\n\n    return (\n      <Card\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n  return <div>{cardArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '700px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1> Ooops! Something went wrong </h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React, { Fragment, Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      robots: [],\n      searchfield: ''\n    };\n  }\n  //experimental. alternative is bind it in constructor.\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value});\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\") \n      .then(response => response.json())\n      .then(users => this.setState({robots: users}))\n    ;\n    // this.setState({robots: robots});\n  }\n\n  render() {\n    const { searchfield, robots } = this.state;\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name\n        .toLowerCase()\n        .includes(searchfield.toLowerCase());\n    });\n\n    if(!robots.length) {\n      return <h1 className=\"tc\"> Loading... </h1>\n    }\n    return (\n      <Fragment>\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}